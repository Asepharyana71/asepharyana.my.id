generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model feedback {
  email     String   @unique
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  name      String?
  password  String
  posts     Post[]    @relation("UserPosts")
  comments  Comment[] @relation("UserComments")
  accounts  Account[] @relation("UserAccounts")
  sessions  Session[] @relation("UserSessions")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  authorId  String    @db.ObjectId
  author    User      @relation("UserPosts", fields: [authorId], references: [id])
  comments  Comment[] @relation("PostComments")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  postId    String   @db.ObjectId
  post      Post     @relation("PostComments", fields: [postId], references: [id])
  authorId  String   @db.ObjectId
  author    User     @relation("UserComments", fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation("UserAccounts", fields: [userId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  expires      DateTime
  sessionToken String   @unique
  accessToken  String?
  user         User     @relation("UserSessions", fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
